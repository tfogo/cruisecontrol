'use strict';

var path = require('path');

module.exports = function(app, passport, auth) {
    //User Routes
    var users = require('./users');
    app.get('/signin', users.signin);
    app.get('/signup', users.signup);
    app.get('/signout', users.signout);
    app.get('/users/me', users.me);

    //Setting up the users api
    app.post('/users', users.create);

    //Setting the local strategy route
    app.post('/users/session', passport.authenticate('local', {
        failureRedirect: '/signin',
        failureFlash: true
    }), users.session);

    //Setting the facebook oauth routes
    app.get('/auth/facebook', passport.authenticate('facebook', {
        scope: ['email', 'user_about_me'],
        failureRedirect: '/signin'
    }), users.signin);

    app.get('/auth/facebook/callback', passport.authenticate('facebook', {
        failureRedirect: '/signin'
    }), users.authCallback);

    //Setting the twitter oauth routes
    app.get('/auth/twitter', passport.authenticate('twitter', {
        failureRedirect: '/signin'
    }), users.signin);

    app.get('/auth/twitter/callback', passport.authenticate('twitter', {
        failureRedirect: '/signin'
    }), users.authCallback);

    //Setting the google oauth routes
    app.get('/auth/google', passport.authenticate('google', {
        failureRedirect: '/signin',
        scope: [
            'https://www.googleapis.com/auth/userinfo.profile',
            'https://www.googleapis.com/auth/userinfo.email'
        ]
    }), users.signin);

    app.get('/auth/google/callback', passport.authenticate('google', {
        failureRedirect: '/signin'
    }), users.authCallback);

    //Finish with setting up the userId param
    app.param('userId', users.user);


    app.get('/partials/*', function(req, res) {
        var stripped = req.url.split('.')[0];
        var requestedView = path.join('./', stripped);
        res.render(requestedView, function(err, html) {
            if(err) {
                res.render('404');
            } else {
                res.send(html);
            }
        });
    });

    app.get('/pdf', function(req,res){
        res.render('pdf');
    });

    app.get('/aws', function(req,res){
        res.render('aws-sdk-test');
    });
    
    

    
    // Articles routes use articles controller
    var podcasts = require('./podcasts');
    var authorization = require('../config/middlewares/authorization');

    // Article authorization helpers
    var hasAuthorization = function(req, res, next) {
        if (req.article.user.id !== req.user.id) {
            return res.send(401, 'User is not authorized');
        }
        next();
    };

    app.get('/api/podcasts', podcasts.all);
    app.post('/api/podcasts', authorization.requiresLogin, podcasts.create);
    app.get('/api/podcasts/:podcastId', podcasts.show);
    app.put('/api/podcasts/:podcastId', authorization.requiresLogin, hasAuthorization, podcasts.update);
    app.del('/api/podcasts/:podcastId', authorization.requiresLogin, hasAuthorization, podcasts.destroy);

    // Finish with setting up the articleId param
    app.param('podcastId', podcasts.podcast);


    var themes = require('./themes');
    app.get('/api/themes', themes.all);
    app.get('/api/getCategoriesInSelectFormat', themes.getCategoriesInSelectFormat);

    var tags = require('./tags');
    app.get('/api/tags', tags.all);

    var upload = require('./upload');
    app.post('/upload-file', upload.upload_file);

    app.get('/*', function(req, res) {
        console.log('index! ' + req.user);
        res.render('index', {
            user: req.user ? JSON.stringify(req.user) : 'null'
        });
    });
    
};
